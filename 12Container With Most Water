QUESTION-
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

EX-Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.


SOLUTION-
class Solution {
public:
    int maxArea(vector<int>& height) {
        //O(N*N)T.C SOLUTION S.C=O(1)  [53 / 60 test cases passed] T.L.E
        
//         int n=height.size();
//       int maxArea=0;
//         for(int i=0;i<n;i++){
//             for(int j=n-1;j>=0;j--){
//                 int area=min(height[j],height[i])*(j-i);
//                 maxArea=max(maxArea,area);
                 
//             }
           
//         }
//         return maxArea;
        
        
        
         //O(N)T.C SOLUTION 
        int n=height.size();
        int maxArea=0;
        int low=0,high=n-1;
        while(low<=high){
            int length=min(height[low],height[high]);
            int width=high-low;
            int area=length*width;
            maxArea=max(maxArea,area);
            if(height[low]<height[high]){
                low++;
            }else if(height[high]<height[low]){
                high--;
            }else {
                low++;
                high--;
            }
        }
        return maxArea;
        
    }
};
