question-Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.


solution
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        //o(n*n) solution brute force method o(1)  space complexity
        //88 / 98 test cases passed.

//         int n=heights.size();
//         int globalMax=0;
//         for(int i=0;i<n;i++){
//          int localMax=0;
//             int height=heights[i],width=1;
            
//             for(int j=i;j<n;j++){
//                 height=min(height,heights[j]);
              
//                localMax=height*width;
//                   width++;
//                 globalMax=max(globalMax,localMax);
//             }
//             width=1;
            
//         }
//         return globalMax;
        
   //using montonostack
// Time: O(N)
// Space: O(N)

        heights.push_back(0); // append a zero at the end so that we can pop all elements from the stack and calculate the corresponding areas
        int N = heights.size(), ans = 0;
        stack<int> s; // strictly-increasing mono-stack
        for (int i = 0; i < N; ++i) {
            while (s.size() && heights[i] <= heights[s.top()]) { // Take `heights[i]` as the right edge
                int height = heights[s.top()]; // Take the popped element as the height
                s.pop();
                int left = s.size() ? s.top() : -1; // Take the element left on the stack as the left edge
                ans = max(ans, (i - left - 1) * height);
            }
            s.push(i);
        }
        return ans;
    }
};
        
   
