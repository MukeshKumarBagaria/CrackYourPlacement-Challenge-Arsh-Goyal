QUESTION-
974. Subarray Sums Divisible by K
Medium

2869

135

Add to List

Share
Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]


SOLUTION-

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        
        //o(n^2) time complexity solution o(1) space complexity
        // int n=nums.size();
        // int ans=0;
        // for(int i=0;i<n;i++){
        //     int sum=0;
        //     for(int j=i;j<n;j++){
        //         sum+=nums[j];
        //         if(sum%k==0) ans++;
        //     }
        // }
        // return ans;
        
        //t.c-> o(n) s.c-o(n) using the concept of prefixSum + HashMap
        
        int n=nums.size();
        unordered_map<int,int>remainderMap;
        remainderMap[0]=1;
        int ans=0;
        int remainder=0;
        int prefixSum=0;
        for(int i=0;i<n;i++){
            prefixSum+=nums[i];
            remainder=prefixSum%k;
            if(remainder<0){
                remainder+=k;
            }
            if(remainderMap.count(remainder)){
                ans+=remainderMap[remainder];
                remainderMap[remainder]++;
            }else remainderMap.insert(pair<int,int>(remainder,1));
        }
      return ans;  
        
    }
};
