QUESTION- Find Peak Element
A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.



SOLUTION-
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        //SOLUTION-1 BRUTE FORCE O(N)T.C O(1)S.C
        // int n=nums.size();
        // if(n==1 || nums[0]>nums[1]) return 0;
        // if(nums[n-1]>nums[n-2]) return n-1;
        // for(int i=1;i<n-1;i++){
        //     if(nums[i]>nums[i-1]&&nums[i]>nums[i+1]) return i;
        // }
        // return -1;
        
        //SOLUTION-2
        //In the num array there only can be three condition
        // 1.array will be descending -in this case first ele will be peak
        // 2.array will be asscending-in this case last ele will be peak
        // 3.array will be non sorted- in this case somwhere in middle of the array will be peak element.
        // int n=nums.size();
        // for(int i=0;i<n-1;i++){
        //     if(nums[i]>nums[i+1]){  // if curr ele is greater than next ele(cover case 1,3)
        //         return i;
        //     }
        // }
        //  return n-1;  //cover case 2 if array is asscending last ele will be peak element
        
        
     
        
    }
};
