QUESTION-  Best Time to Buy and Sell Stock(VARIATION-1) WHERE I CAN BUY ONCE AND SELL ONCE
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

EX-Input: prices = [7,1,5,3,6,4]
Output: 5



SOLUTION-
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //O(n*n)  time complexity solution
        
        // int n=prices.size();
        // int globalMax=0;
        // for(int i=0;i<n;i++){
        //     int localMax=0;
        //     for(int j=i+1;j<n;j++){
        //         localMax=max(localMax,(prices[j]-prices[i]));
        //     }
        //     globalMax=max(globalMax,localMax);
        //     localMax=0;
        // }
        // return globalMax;
        
        //o(n) time complexity solution. (It's a tricky one solution  revision neccessary )
        
        int n=prices.size();
        int max=prices[n-1];
        int res=0;
        for(int i=n-1;i>=0;i--){
            if(max-prices[i]>res){
                res=max-prices[i];
            }
            if(prices[i]>max){
                max=prices[i];
            }
        }
        return res;
    }
};
