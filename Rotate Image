QUESTION-Rotate Image
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.


Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]


SOLUTION-
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
          //we will interchange uppper row with lower row
        for(int i=0;i<(n/2);i++){
            for(int j=0;j<n;j++){
                swap(matrix[i][j],matrix[n-1-i][j]);
            }
        }
     // we will take transpose of given matrix
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        
      
    }
};



// i printed out the matrix after 90degree roation clockwise
// // Online C++ compiler to run C++ program online
// #include <bits/stdc++.h>
// using namespace std;

//    void rotate(vector<vector<int>>& matrix) {
//         //using extra space
//        // vector<vector<int>>ans;
//         int n=matrix.size();
//         int count=0;
//         for(int i=n-1;i>=0;i--){
//           for(int j=n-1;j>=0;j--){
//               cout<<matrix[j][count]<<" ";
//           }
//         count++;
//         cout<<endl;
//     }
       
//    }
// int main() {
//     // Write C++ code here
//     vector<vector<int>> matrix = { {1,2,3},
//                  {4,5,6},
//                  {7,8,9} };
//      int n=matrix.size();
//      cout<<"size of matrix "<<n<<endl;
//      for(int i=0;i<=n-1;i++){
//         for(int j=0;j<matrix[i].size();j++){
//          cout<<matrix[i][j]<<" ";
//         }
//          cout<<endl;
//         }
        
//         cout<<"after rotating 90 degree"<<endl;
//   rotate(matrix);
    
//     return 0;
// }

//output:-
// /tmp/8O7jA0CbE7.o
// size of matrix 3
// 1 2 3 
// 4 5 6 
// 7 8 9 
// after rotating 90 degree
// 7 4 1 
// 8 5 2 
// 9 6 3 
